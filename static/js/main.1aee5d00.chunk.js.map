{"version":3,"sources":["Components/City.js","Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weatherlogo","styled","img","SearchBox","form","City","props","updateCity","fetchWeather","src","onSubmit","placeholder","onChange","e","target","value","type","WeatherInfoIcons","sunset","sunrise","humidity","wind","pressure","WeatherCondition","div","Condition","span","Location","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","WeatherInfoComponent","name","Weather","timeStamp","weather","isDay","icon","includes","Math","floor","main","temp","description","sys","country","Date","getHours","getMinutes","speed","Container","App","useState","city","updateWeather","a","preventDefault","axios","get","responce","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1aee5d00.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst Weatherlogo = styled.img`\r\nwidth: 140px;\r\nheight:140px;\r\nmargin: 20px auto;\r\n`\r\nconst SearchBox = styled.form`\r\n display:flex;\r\n flex-direction:row;\r\n border:black solid 1px;\r\n border-radius: 2px;\r\n color:#000;\r\n font-size:18px;\r\n font-weight:bold;\r\n margin:10px auto;\r\n & input{\r\n    padding: 10px;\r\n    font-size:14px;\r\n    border:none;\r\n    outline:noen;\r\n\r\n }\r\n\r\n & button{\r\n    padding: 10px;\r\n    font-size:14px;\r\n    border:none;\r\n    outline:noen;\r\n    color:#fff;\r\n    background-color:#333;\r\n    cursor:pointer;\r\n }\r\n`\r\nconst City = (props) => {\r\n\r\n    const {updateCity, fetchWeather} = props;\r\n    return (\r\n       \r\n           <> \r\n           \r\n           <Weatherlogo src=\"icons/perfect-day.svg\" />\r\n            <h3>Choose Your City</h3>\r\n            <SearchBox onSubmit={ fetchWeather }>\r\n                <input placeholder=\"City\" onChange={ (e) => updateCity(e.target.value)  } />\r\n                <button type=\"submit\">Search</button>\r\n            </SearchBox>\r\n           </>\r\n        \r\n    );\r\n}\r\n\r\nexport default City;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nexport const WeatherInfoIcons = {\r\n    sunset: \"icons/temp.svg\",\r\n    sunrise: \"icons/temp.svg\",\r\n    humidity: \"icons/humidity.svg\",\r\n    wind: \"icons/wind.svg\",\r\n    pressure: \"icons/pressure.svg\",\r\n};\r\n\r\nconst WeatherCondition = styled.div `\r\ndisplay: flex;\r\nflex-direction:row;\r\nalign-items:center;\r\nwidth:100%;\r\njustify-content: space-between;\r\nmargin:30px auto;\r\n\r\n`;\r\nconst  Condition = styled.span `\r\nmargin:20px auto;\r\nfont-size: 16px;\r\n& span{\r\n    font-size:28px;\r\n}\r\n`;\r\nconst Weatherlogo = styled.img`\r\nwidth: 100px;\r\nheight:100px;\r\nmargin: 5px auto;\r\n`;\r\nconst Location = styled.span `\r\nfont-size:28px;\r\nfont-weight:bold;\r\n`;\r\n\r\nconst WeatherInfoLabel = styled.span `\r\nfont-size:16px;\r\nfont-weight:bold;\r\ntext-align:start;\r\nwidth:90%;\r\nmargin:20px 25px 10px;\r\n`;\r\nconst WeatherInfoContainer = styled.div `\r\ndisplay:flex;\r\nwidth:90%;\r\nflex-direction:row;\r\njustify-content: space-evenly;\r\nalign-items:center;\r\nflex-wrap: wrap;\r\n`;\r\n\r\nconst InfoContainer = styled.div `\r\ndisplay:flex;\r\nmargin:5px 10px;\r\nflex-direction:row;\r\njustify-content: space-evenly;\r\nalign-items:center;\r\n`;\r\n\r\nconst InfoIcon = styled.img`\r\n  width: 36px;\r\n  height: 36px;\r\n`;\r\nconst InfoLabel = styled.span`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 14px;\r\n  margin: 15px;\r\n  & span {\r\n    font-size: 12px;\r\n    text-transform: capitalize;\r\n  }\r\n`;\r\n\r\nconst WeatherInfoComponent =  (props) =>{\r\n    const {name, value} = props ;   //destructuring \r\n    return(\r\n        <InfoContainer>\r\n            <InfoIcon src={WeatherInfoIcons[name]}  />\r\n            <InfoLabel>\r\n             { value }\r\n            <span>{ name }</span>\r\n            </InfoLabel>\r\n        </InfoContainer>\r\n    )\r\n}\r\n\r\n\r\nconst Weather = (props) => {\r\n    const {weather} = props;\r\n    const isDay = weather?.weather[0].icon?.includes(\"d\");\r\n    const getTime = (timeStamp) => {\r\n        return ` ${new Date(timeStamp * 1000).getHours()} : ${new Date(timeStamp * 1000).getMinutes()} `;\r\n    };\r\n    return (\r\n        <>\r\n            <WeatherCondition>\r\n                <Condition><span>{`${Math.floor(weather?.main?.temp - 273)}Â°C `}</span> {`| ${weather?.weather[0]?.description}`}</Condition>\r\n                <Weatherlogo src=\"icons/perfect-day.svg\" />\r\n            </WeatherCondition>\r\n            <Location>{`${weather?.name}, ${weather?.sys?.country}`}</Location>\r\n            <WeatherInfoLabel>Weather Info</WeatherInfoLabel>\r\n            <WeatherInfoContainer>\r\n                <WeatherInfoComponent name={ isDay ? \"sunset\" : \"sunrise\" } \r\n                                     value={ getTime(weather?.sys[isDay ?  \"sunset\" : \"sunrise\"]  )}/>\r\n                <WeatherInfoComponent name=\"humidity\" value={weather?.main?.humidity} />\r\n                <WeatherInfoComponent name=\"wind\" value={weather?.wind?.speed}/>\r\n                <WeatherInfoComponent name=\"pressure\" value={weather?.main?.pressure}/>\r\n            </WeatherInfoContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n","import axios from 'axios';\nimport React, { useState } from 'react';\nimport styled from \"styled-components\";\nimport City from './Components/City';\nimport Weather from './Components/Weather';\n\n\nconst API_KEY = \"3e36e00638a59e33fb257776d23c52f8\";\n\n\nconst Container = styled.div `\ndisplay:flex;\nflex-direction:column;\nmargin:auto;\nalign-items:center;\nbox-shadow: 0 3px 6px 0 #444;\npadding: 20px 10px;\nborder-radius: 4px;\nwidth: 380px;\nbackground-color:#fff;\n`;\n\n \n\nconst App = () => {\n \n  const [city, updateCity]  = useState();\n  const [weather, updateWeather] = useState();\n  const fetchWeather = async(e) =>{\n    e.preventDefault();\n    const responce = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`,\n    );\n    updateWeather(responce.data);\n  }\n\n  return (\n    <Container>\n\n      <h2>React Weather App</h2>\n      {weather ?<Weather weather={weather} /> :<City updateCity={ updateCity } fetchWeather= { fetchWeather } />}\n      \n    </Container>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}